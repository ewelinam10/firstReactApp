{"version":3,"sources":["logo.svg","Components/ToDoItem/ToDoItem.js","Conteners/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TaskName","styled","p","classNames","require","ToDoItem","state","done","props","changeStateOfTask","event","setState","text","this","task","classes","className","type","onChange","Component","defaultProps","Title","h1","Container","div","TextInput","input","NewToDoForm","onSubmit","draft","value","onClick","ToDoList","tasks","updateDraft","target","addTask","newTasks","push","title","map","App","src","logo","alt","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,kC,kUCG3C,IAAMC,EAAWC,IAAOC,EAAV,KAIVC,EAAaC,EAAQ,IAGnBC,E,4MAKJC,MAAQ,CACNC,KAAO,EAAKC,MAAMD,M,EAEpBE,kBAAoB,SAACC,GACrB,EAAKC,SAAS,CAACJ,MAAQ,EAAKD,MAAMC,Q,uDAGvB,IACAK,EAAQC,KAAKL,MAAMM,KAAnBF,KACHG,EAAUZ,EAAW,CACvB,MAAS,EACT,KAASU,KAAKP,MAAMC,OAEtB,OAEE,yBAAKS,UAAaD,GAClB,2BAAG,2BAAOE,KAAK,WAAWC,SAAUL,KAAKJ,qBACzC,kBAACT,EAAD,SAAYY,Q,GAtBGO,aAAjBd,EACKe,aAAe,CACpBb,MAAO,GA0BIF,Q,qiBClCjB,IAAMgB,EAAQpB,IAAOqB,GAAV,KAILC,EAAWtB,IAAOuB,IAAT,KAMTC,EAAYxB,IAAOyB,MAAV,KAWTC,EAAc,SAAC,GAAD,IAAET,EAAF,EAAEA,SAASU,EAAX,EAAWA,SAASC,EAApB,EAAoBA,MAApB,OAClB,6BACA,kBAACJ,EAAD,CAAWR,KAAM,OAAOC,SAAUA,EAAUY,MAAOD,IACnD,4BAAQE,QAASH,GAAjB,kBAMII,E,4MAUF1B,MAAQ,CACN2B,MAAO,EAAKzB,MAAMyB,MAClBJ,MAAQ,I,EAGVK,YAAc,SAACxB,GACb,EAAKC,SAAS,CAACkB,MAAQnB,EAAMyB,OAAOL,S,EAGtCM,QAAU,WAAO,IAAD,EACW,EAAK9B,MAAtB2B,EADM,EACNA,MACFI,GAFQ,EACCR,MACEI,GACjBI,EAASC,KAAK,CAAC1B,KAAK,EAAKN,MAAMuB,QAC/B,EAAKlB,SAAS,CAACsB,MAAQI,EAAUR,MAAQ,M,uDAIzC,IAAMU,EAAQ1B,KAAKL,MAAM+B,MADnB,EAEoB1B,KAAKP,MAAvB2B,EAFF,EAEEA,MAAOJ,EAFT,EAESA,MACf,OACE,kBAACN,EAAD,KACE,kBAACF,EAAD,SAASkB,GACRN,EAAMO,KAAI,SAAA1B,GAAI,OACf,kBAAC,EAAD,CAAUA,KAAMA,OAEhB,kBAAC,EAAD,CAAaI,SAAYL,KAAKqB,YAAaN,SAAYf,KAAKuB,QAASP,MAASA,S,GAnCjEV,aAAjBa,EACGZ,aAAe,CACpBa,MAAQ,CACN,CAACrB,KAAK,aACN,CAACA,KAAK,wBACN,CAACA,KAAK,QAEP2B,MAAQ,aAkCIP,QCzCFS,E,uKAzBX,OACE,6BACE,8BACE,6BACE,yBAAKC,IAAKC,IAAM3B,UAAU,WAAW4B,IAAI,UAG3C,2BACE,6BACE,kBAAC,EAAD,SAKN,oDACsB,IAClB,uBAAGC,KAAK,6BAAR,yB,GAnBM1B,aCME2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a197b60e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.dc45a3a7.svg\";","import React, { Component } from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst TaskName = styled.p`\r\nfont-style : italic;\r\n`;\r\n\r\nvar classNames = require('classnames');\r\n\r\n\r\nclass ToDoItem extends Component{\r\n    static defaultProps = {\r\n      done : false\r\n    }\r\n  \r\n  state = {\r\n    done : this.props.done\r\n  }\r\n  changeStateOfTask = (event) => {\r\n  this.setState({done : !this.state.done})\r\n  }\r\n  \r\n    render(){\r\n      const {text} = this.props.task;\r\n      var classes = classNames({\r\n        'task' : true,\r\n        'done' : this.state.done\r\n      });\r\n      return (\r\n        \r\n        <div className = {classes}>\r\n        <p><input type=\"checkbox\" onChange={this.changeStateOfTask}/></p>\r\n        <TaskName> {text}</TaskName>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default ToDoItem","import React, { Component } from 'react';\r\nimport ToDoItem from '../Components/ToDoItem/ToDoItem.js'\r\nimport styled from 'styled-components'\r\n\r\nconst Title = styled.h1`\r\nfont-family: 'Josefin Sans', sans-serif;\r\n`;\r\n\r\nconst Container =styled.div`\r\n  background-color: #303238;\r\n  padding : 50px;\r\n  border-radius: 20%;\r\n`;\r\n\r\nconst TextInput = styled.input`\r\n  border: 2px solid white;  \r\n  padding: 10px;\r\n  box-shadow: \r\n      inset 0 0 8px  rgba(0,0,0,0.1),\r\n            0 0 10px  rgb(142, 221, 135);\r\n  background:  #4a4d53;\r\n  font-size : 20px;\r\n  color : rgb(252, 255, 78);\r\n`\r\n\r\nconst NewToDoForm = ({onChange,onSubmit,draft}) => (\r\n  <div>\r\n  <TextInput type= 'text' onChange={onChange} value={draft}/>\r\n  <button onClick={onSubmit}>Add new task</button>\r\n    </div>\r\n)\r\n\r\n\r\n\r\nclass ToDoList extends Component{\r\n  static defaultProps = {\r\n    tasks : [\r\n      {text:\"Eat pizza\"},\r\n      {text:\"Watch hotel paradise\"},\r\n      {text:\"Hug\"}\r\n     ],\r\n     title : 'TODO LIST'\r\n  }\r\n  \r\n    state = {\r\n      tasks: this.props.tasks,\r\n      draft : ''\r\n    }\r\n  \r\n    updateDraft = (event) => {\r\n      this.setState({draft : event.target.value})\r\n    }\r\n  \r\n    addTask = () => {\r\n      const { tasks, draft } = this.state\r\n      const newTasks = tasks\r\n      newTasks.push({text:this.state.draft});\r\n      this.setState({tasks : newTasks, draft : ''})\r\n    }\r\n  \r\n    render(){\r\n      const title = this.props.title\r\n      const { tasks, draft }  = this.state\r\n      return (\r\n        <Container>\r\n          <Title> {title}</Title>\r\n          {tasks.map(task => \r\n          <ToDoItem task={task}></ToDoItem>\r\n          )}\r\n          <NewToDoForm onChange = {this.updateDraft} onSubmit = {this.addTask} draft = {draft} />\r\n        </Container>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default ToDoList","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport ToDoList from './Conteners/ToDoList.js'\r\n\r\n\r\nclass App extends Component {\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <body>\r\n          <div>\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          </div>\r\n\r\n          <p>\r\n            <div>\r\n              <ToDoList />\r\n            </div>\r\n          </p>\r\n        </body>\r\n\r\n        <footer>\r\n            Designed with the{\" \"}\r\n            <a href=\"https://www.vecteezy.com/\">Vecteezy Editor</a>\r\n          </footer>\r\n          \r\n      </div>\r\n    );\r\n        \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}